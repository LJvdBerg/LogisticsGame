[1mdiff --git a/main.py b/main.py[m
[1mindex fec37c0..66b1c51 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -353,12 +353,20 @@[m [mclass Game:[m
                                 b = self.get_building_at_cell(clicked_cell)[m
                                 if b is not None:[m
                                     print(f"Clicked on building: {b.type} at {clicked_cell}")[m
[31m-                                    if b.type in ("lumber", "quarry", "refinery"):[m
[32m+[m[32m                                    if b.type in ("lumber", "quarry"):[m
[32m+[m[32m                                        # Lumber and quarry are sources - they produce resources[m
                                         self.pending_source = clicked_cell[m
[31m-                                        # Default destination to base for convenience[m
                                         self.pending_destination = self.base_cell[m
                                         self.assign_stage = "choose_truck"[m
[31m-                                        print(f"Starting truck assignment for {b.type}")[m
[32m+[m[32m                                        print(f"Starting truck assignment for {b.type} (source)")[m
[32m+[m[32m                                        return[m
[32m+[m[32m                                    elif b.type == "refinery":[m
[32m+[m[32m                                        # Refinery is a destination - it needs stone delivered[m
[32m+[m[32m                                        # For refinery, we'll set up a route from base (which has stone) to refinery[m
[32m+[m[32m                                        self.pending_source = self.base_cell  # Base has stone[m
[32m+[m[32m                                        self.pending_destination = clicked_cell  # Refinery needs stone[m
[32m+[m[32m                                        self.assign_stage = "choose_truck"[m
[32m+[m[32m                                        print(f"Refinery selected: Base â†’ Refinery route (stone delivery)")[m
                                         return[m
                         elif self.assign_stage == "choose_source":[m
                             # Select source facility[m
[36m@@ -768,8 +776,8 @@[m [mclass Game:[m
 [m
     def draw_refinery_info_panel(self, building, mouse_pos) -> None:[m
         """Draw a nice info panel for refinery buildings"""[m
[31m-        panel_width = 200[m
[31m-        panel_height = 120[m
[32m+[m[32m        panel_width = 250[m
[32m+[m[32m        panel_height = 160[m
         margin = 20[m
         [m
         # Position panel near mouse but keep it on screen[m
[36m@@ -786,50 +794,79 @@[m [mclass Game:[m
         title_rect = title.get_rect(midtop=(panel_rect.centerx, panel_rect.y + 10))[m
         self.screen.blit(title, title_rect)[m
         [m
[31m-        # Resource info in a nice square[m
[31m-        info_x = panel_rect.x + 15[m
[31m-        info_y = panel_rect.y + 40[m
[32m+[m[32m        # Two columns: DELIVER and RECEIVE[m
[32m+[m[32m        col_width = 100[m
[32m+[m[32m        col_spacing = 20[m
[32m+[m[32m        left_col_x = panel_rect.x + 15[m
[32m+[m[32m        right_col_x = left_col_x + col_width + col_spacing[m
[32m+[m[32m        start_y = panel_rect.y + 40[m
[32m+[m[41m        [m
[32m+[m[32m        # LEFT COLUMN: DELIVER (Stone Input)[m
[32m+[m[32m        pygame.draw.rect(self.screen, (80, 80, 80), (left_col_x - 5, start_y - 5, col_width + 10, 80), border_radius=6)[m
[32m+[m[32m        deliver_title = self.font.render("DELIVER", True, (255, 200, 200))[m
[32m+[m[32m        self.screen.blit(deliver_title, (left_col_x, start_y))[m
         [m
[31m-        # Stone input section[m
         stone_amt = int(building.storage.get("stone", 0))[m
[31m-        stone_text = self.font.render(f"Stone Input: {stone_amt}", True, (200, 200, 200))[m
[31m-        self.screen.blit(stone_text, (info_x, info_y))[m
[32m+[m[32m        stone_text = self.font.render(f"Stone: {stone_amt}", True, (200, 200, 200))[m
[32m+[m[32m        self.screen.blit(stone_text, (left_col_x, start_y + 25))[m
[32m+[m[41m        [m
[32m+[m[32m        # Stone loading bar[m
[32m+[m[32m        stone_bar_width = 80[m
[32m+[m[32m        stone_bar_height = 6[m
[32m+[m[32m        stone_bar_x = left_col_x[m
[32m+[m[32m        stone_bar_y = start_y + 45[m
[32m+[m[41m        [m
[32m+[m[32m        # Background bar[m
[32m+[m[32m        pygame.draw.rect(self.screen, (60, 60, 60), (stone_bar_x, stone_bar_y, stone_bar_width, stone_bar_height), border_radius=3)[m
[32m+[m[41m        [m
[32m+[m[32m        # Stone capacity bar (max 5 stone)[m
[32m+[m[32m        stone_capacity = min(stone_amt, 5)[m
[32m+[m[32m        stone_progress_width = int(stone_bar_width * (stone_capacity / 5.0))[m
[32m+[m[32m        if stone_progress_width > 0:[m
[32m+[m[32m            pygame.draw.rect(self.screen, (200, 200, 200), (stone_bar_x, stone_bar_y, stone_progress_width, stone_bar_height), border_radius=3)[m
[32m+[m[41m        [m
[32m+[m[32m        # Border[m
[32m+[m[32m        pygame.draw.rect(self.screen, (120, 120, 120), (stone_bar_x, stone_bar_y, stone_bar_width, stone_bar_height), 1, border_radius=3)[m
[32m+[m[41m        [m
[32m+[m[32m        # RIGHT COLUMN: RECEIVE (BMAT Output)[m
[32m+[m[32m        pygame.draw.rect(self.screen, (80, 80, 80), (right_col_x - 5, start_y - 5, col_width + 10, 80), border_radius=6)[m
[32m+[m[32m        receive_title = self.font.render("RECEIVE", True, (200, 255, 200))[m
[32m+[m[32m        self.screen.blit(receive_title, (right_col_x, start_y))[m
         [m
[31m-        # BMAT output section[m
         bmat_amt = int(building.storage.get("bmats", 0))[m
[31m-        bmat_text = self.font.render(f"BMAT Output: {bmat_amt}", True, (255, 200, 80))[m
[31m-        self.screen.blit(bmat_text, (info_x, info_y + 25))[m
[32m+[m[32m        bmat_text = self.font.render(f"BMATS: {bmat_amt}", True, (255, 200, 80))[m
[32m+[m[32m        self.screen.blit(bmat_text, (right_col_x, start_y + 25))[m
         [m
[31m-        # Production rate[m
[31m-        rate_text = self.font.render(f"Rate: {building.production_rate_per_sec:.1f}/s", True, (150, 200, 150))[m
[31m-        self.screen.blit(rate_text, (info_x, info_y + 50))[m
[32m+[m[32m        # BMAT production loading bar[m
[32m+[m[32m        bmat_bar_width = 80[m
[32m+[m[32m        bmat_bar_height = 6[m
[32m+[m[32m        bmat_bar_x = right_col_x[m
[32m+[m[32m        bmat_bar_y = start_y + 45[m
         [m
[31m-        # Status[m
[32m+[m[32m        # Background bar[m
[32m+[m[32m        pygame.draw.rect(self.screen, (60, 60, 60), (bmat_bar_x, bmat_bar_y, bmat_bar_width, bmat_bar_height), border_radius=3)[m
[32m+[m[41m        [m
[32m+[m[32m        # Progress bar (5 seconds = 1 bmat)[m
[32m+[m[32m        if "conversion_timer" in building.__dict__ and stone_amt > 0:[m
[32m+[m[32m            progress = building.conversion_timer / 5.0[m
[32m+[m[32m            progress_width = int(bmat_bar_width * progress)[m
[32m+[m[32m            if progress_width > 0:[m
[32m+[m[32m                pygame.draw.rect(self.screen, (100, 200, 100), (bmat_bar_x, bmat_bar_y, progress_width, bmat_bar_height), border_radius=3)[m
[32m+[m[41m        [m
[32m+[m[32m        # Border[m
[32m+[m[32m        pygame.draw.rect(self.screen, (120, 120, 120), (bmat_bar_x, bmat_bar_y, bmat_bar_width, bmat_bar_height), 1, border_radius=3)[m
[32m+[m[41m        [m
[32m+[m[32m        # Status at bottom[m
[32m+[m[32m        status_y = start_y + 90[m
         if stone_amt > 0:[m
[31m-            status_text = self.font.render("Status: Converting", True, (100, 200, 100))[m
[32m+[m[32m            status_text = self.font.render("Status: Converting stone to bmats", True, (100, 200, 100))[m
         else:[m
[31m-            status_text = self.font.render("Status: Waiting for stone", True, (200, 100, 100))[m
[31m-        self.screen.blit(status_text, (info_x, info_y + 75))[m
[32m+[m[32m            status_text = self.font.render("Status: Waiting for stone delivery", True, (200, 100, 100))[m
[32m+[m[32m        self.screen.blit(status_text, (left_col_x, status_y))[m
         [m
[31m-        # Loading bar for bmat production[m
[31m-        if stone_amt > 0:[m
[31m-            bar_width = 150[m
[31m-            bar_height = 8[m
[31m-            bar_x = info_x[m
[31m-            bar_y = info_y + 95[m
[31m-            [m
[31m-            # Background bar[m
[31m-            pygame.draw.rect(self.screen, (60, 60, 60), (bar_x, bar_y, bar_width, bar_height), border_radius=4)[m
[31m-            [m
[31m-            # Progress bar (5 seconds = 1 bmat)[m
[31m-            if "conversion_timer" in building.__dict__:[m
[31m-                progress = building.conversion_timer / 5.0[m
[31m-                progress_width = int(bar_width * progress)[m
[31m-                if progress_width > 0:[m
[31m-                    pygame.draw.rect(self.screen, (100, 200, 100), (bar_x, bar_y, progress_width, bar_height), border_radius=4)[m
[31m-            [m
[31m-            # Border[m
[31m-            pygame.draw.rect(self.screen, (120, 120, 120), (bar_x, bar_y, bar_width, bar_height), 1, border_radius=4)[m
[32m+[m[32m        # Instructions[m
[32m+[m[32m        instruction_text = self.font.render("Assign truck to deliver stone", True, (150, 150, 200))[m
[32m+[m[32m        self.screen.blit(instruction_text, (left_col_x, status_y + 20))[m
 [m
     def draw_quarry_info_panel(self, building, mouse_pos) -> None:[m
         """Draw a nice info panel for quarry buildings"""[m
[36m@@ -1035,17 +1072,34 @@[m [mclass Game:[m
         y = panel_rect.y + 12[m
         btn_w = 140[m
         btn_h = 36[m
[31m-        # Determine options from source building type[m
[32m+[m[32m        # Determine options from source building type and destination[m
         options: List[str] = [][m
         if self.pending_source is not None:[m
[31m-            b = self.get_building_at_cell(self.pending_source)[m
[31m-            if b is not None:[m
[31m-                if b.type == "lumber":[m
[31m-                    options = ["wood"][m
[31m-                elif b.type == "quarry":[m
[32m+[m[32m            # Check if this is a base â†’ refinery route[m
[32m+[m[32m            if self.pending_source == self.base_cell and self.pending_destination is not None:[m
[32m+[m[32m                dest_building = self.get_building_at_cell(self.pending_destination)[m
[32m+[m[32m                if dest_building and dest_building.type == "refinery":[m
[32m+[m[32m                    # Base â†’ Refinery route: truck picks up stone from base[m
                     options = ["stone"][m
[31m-                elif b.type == "refinery":[m
[31m-                    options = ["bmats"][m
[32m+[m[32m                else:[m
[32m+[m[32m                    # Base â†’ Other: show available resources at base[m
[32m+[m[32m                    if self.resources.get("wood", 0) > 0:[m
[32m+[m[32m                        options.append("wood")[m
[32m+[m[32m                    if self.resources.get("stone", 0) > 0:[m
[32m+[m[32m                        options.append("stone")[m
[32m+[m[32m                    if self.resources.get("bmats", 0) > 0:[m
[32m+[m[32m                        options.append("bmats")[m
[32m+[m[32m            else:[m
[32m+[m[32m                # Regular source building route[m
[32m+[m[32m                b = self.get_building_at_cell(self.pending_source)[m
[32m+[m[32m                if b is not None:[m
[32m+[m[32m                    if b.type == "lumber":[m
[32m+[m[32m                        options = ["wood"][m
[32m+[m[32m                    elif b.type == "quarry":[m
[32m+[m[32m                        options = ["stone"][m
[32m+[m[32m                    elif b.type == "refinery":[m
[32m+[m[32m                        options = ["bmats"][m
[32m+[m[41m        [m
         if not options:[m
             options = ["wood"][m
         for opt in options:[m
[36m@@ -1503,56 +1557,102 @@[m [mclass Game:[m
                 [m
                 # Load from source building storage[m
                 if t.cargo_type == "wood":[m
[31m-                    b = src_building[m
[31m-                    amount_available = 0.0[m
[31m-                    if b and b.type == "lumber":[m
[31m-                        amount_available = b.storage.get("wood", 0.0)[m
[31m-                    load_amount = min(5.0, amount_available, t.cargo_capacity - t.cargo_amount)[m
[31m-                    if load_amount > 0:[m
[31m-                        t.cargo_amount += load_amount[m
[32m+[m[32m                    if src_cell == self.base_cell:[m
[32m+[m[32m                        # Loading from base[m
[32m+[m[32m                        amount_available = self.resources.get("wood", 0)[m
[32m+[m[32m                        load_amount = min(5.0, amount_available, t.cargo_capacity - t.cargo_amount)[m
[32m+[m[32m                        if load_amount > 0:[m
[32m+[m[32m                            t.cargo_amount += load_amount[m
[32m+[m[32m                            self.resources["wood"] = max(0, amount_available - load_amount)[m
[32m+[m[32m                            print(f"Truck {t.truck_id} loaded {load_amount} wood from base")[m
[32m+[m[32m                    else:[m
[32m+[m[32m                        # Loading from building[m
[32m+[m[32m                        b = src_building[m
[32m+[m[32m                        amount_available = 0.0[m
                         if b and b.type == "lumber":[m
[31m-                            b.storage["wood"] = max(0.0, b.storage.get("wood", 0.0) - load_amount)[m
[31m-                        print(f"Truck {t.truck_id} loaded {load_amount} wood from lumber camp")[m
[32m+[m[32m                            amount_available = b.storage.get("wood", 0.0)[m
[32m+[m[32m                        load_amount = min(5.0, amount_available, t.cargo_capacity - t.cargo_amount)[m
[32m+[m[32m                        if load_amount > 0:[m
[32m+[m[32m                            t.cargo_amount += load_amount[m
[32m+[m[32m                            if b and b.type == "lumber":[m
[32m+[m[32m                                b.storage["wood"] = max(0.0, b.storage.get("wood", 0.0) - load_amount)[m
[32m+[m[32m                            print(f"Truck {t.truck_id} loaded {load_amount} wood from lumber camp")[m
                 elif t.cargo_type == "stone":[m
[31m-                    b = src_building[m
[31m-                    amount_available = 0.0[m
[31m-                    if b and b.type == "quarry":[m
[31m-                        amount_available = b.storage.get("stone", 0.0)[m
[31m-                    load_amount = min(5.0, amount_available, t.cargo_capacity - t.cargo_amount)[m
[31m-                    if load_amount > 0:[m
[31m-                        t.cargo_amount += load_amount[m
[31m-                        if b and b.type == "quarry":[m
[31m-                            b.storage["stone"] = max(0.0, b.storage.get("stone", 0.0) - load_amount)[m
[31m-                        print(f"Truck {t.truck_id} loaded {load_amount} stone from quarry")[m
[31m-                        [m
[31m-                        # If this is a refinery loop, go directly to refinery[m
[31m-                        if hasattr(t, "refinery_loop") and t.refinery_loop:[m
[32m+[m[32m                    if src_cell == self.base_cell:[m
[32m+[m[32m                        # Loading stone from base[m
[32m+[m[32m                        amount_available = self.resources.get("stone", 0)[m
[32m+[m[32m                        load_amount = min(5.0, amount_available, t.cargo_capacity - t.cargo_amount)[m
[32m+[m[32m                        if load_amount > 0:[m
[32m+[m[32m                            t.cargo_amount += load_amount[m
[32m+[m[32m                            self.resources["stone"] = max(0, amount_available - load_amount)[m
[32m+[m[32m                            print(f"Truck {t.truck_id} loaded {load_amount} stone from base")[m
[32m+[m[41m                            [m
[32m+[m[32m                            # If destination is refinery, set up refinery loop[m
                             dest = getattr(t, "_dest_cell", None)[m
                             if dest is not None:[m
[31m-                                # Go directly to refinery with stone[m
[31m-                                cur_road = self.find_nearest_road_to_cell(t.current_cell) or t.current_cell[m
[31m-                                dest_road = self.find_nearest_road_to_cell(dest)[m
[31m-                                if dest_road:[m
[31m-                                    path2 = self.find_path_on_roads(cur_road, dest_road)[m
[31m-                                    if path2:[m
[31m-                                        path2.append(dest)[m
[31m-                                        t.path_cells = path2[m
[31m-                                        t.state = "to_dest"[m
[31m-                                        return[m
[32m+[m[32m                                dest_building = self.get_building_at_cell(dest)[m
[32m+[m[32m                                if dest_building and dest_building.type == "refinery":[m
[32m+[m[32m                                    t.refinery_loop = True[m
[32m+[m[32m                                    print(f"Truck {t.truck_id} set up for refinery stone delivery loop")[m
[32m+[m[32m                    else:[m
[32m+[m[32m                        # Loading from quarry[m
[32m+[m[32m                        b = src_building[m
[32m+[m[32m                        amount_available = 0.0[m
[32m+[m[32m                        if b and b.type == "quarry":[m
[32m+[m[32m                            amount_available = b.storage.get("stone", 0.0)[m
[32m+[m[32m                        load_amount = min(5.0, amount_available, t.cargo_capacity - t.cargo_amount)[m
[32m+[m[32m                        if load_amount > 0:[m
[32m+[m[32m                            t.cargo_amount += load_amount[m
[32m+[m[32m                            if b and b.type == "quarry":[m
[32m+[m[32m                                b.storage["stone"] = max(0.0, b.storage.get("stone", 0.0) - load_amount)[m
[32m+[m[32m                            print(f"Truck {t.truck_id} loaded {load_amount} stone from quarry")[m
[32m+[m[41m                            [m
[32m+[m[32m                            # If this is a refinery loop, go directly to refinery[m
[32m+[m[32m                            if hasattr(t, "refinery_loop") and t.refinery_loop:[m
[32m+[m[32m                                dest = getattr(t, "_dest_cell", None)[m
[32m+[m[32m                                if dest is not None:[m
[32m+[m[32m                                    # Go directly to refinery with stone[m
[32m+[m[32m                                    cur_road = self.find_nearest_road_to_cell(t.current_cell) or t.current_cell[m
[32m+[m[32m                                    dest_road = self.find_nearest_road_to_cell(dest)[m
[32m+[m[32m                                    if dest_road:[m
[32m+[m[32m                                        path2 = self.find_path_on_roads(cur_road, dest_road)[m
[32m+[m[32m                                        if path2:[m
[32m+[m[32m                                            path2.append(dest)[m
[32m+[m[32m                                            t.path_cells = path2[m
[32m+[m[32m                                            t.state = "to_dest"[m
[32m+[m[32m                                            print(f"Truck {t.truck_id} heading to refinery with {load_amount} stone")[m
[32m+[m[32m                                            return[m
                 elif t.cargo_type == "bmats":[m
[31m-                    b = src_building[m
[31m-                    amount_a